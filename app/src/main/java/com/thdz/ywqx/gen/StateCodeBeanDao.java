package com.thdz.ywqx.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.thdz.ywqx.bean.StateCodeBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATE_CODE_BEAN".
*/
public class StateCodeBeanDao extends AbstractDao<StateCodeBean, Long> {

    public static final String TABLENAME = "STATE_CODE_BEAN";

    /**
     * Properties of entity StateCodeBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CodeId = new Property(1, String.class, "CodeId", false, "CODE_ID");
        public final static Property CodeString = new Property(2, String.class, "CodeString", false, "CODE_STRING");
        public final static Property CodeName = new Property(3, String.class, "CodeName", false, "CODE_NAME");
        public final static Property CodeValue = new Property(4, String.class, "CodeValue", false, "CODE_VALUE");
        public final static Property CodeTable = new Property(5, String.class, "CodeTable", false, "CODE_TABLE");
        public final static Property CodeField = new Property(6, String.class, "CodeField", false, "CODE_FIELD");
        public final static Property GroupId = new Property(7, String.class, "GroupId", false, "GROUP_ID");
        public final static Property CodeGroup = new Property(8, String.class, "CodeGroup", false, "CODE_GROUP");
    }


    public StateCodeBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StateCodeBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATE_CODE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODE_ID\" TEXT UNIQUE ," + // 1: CodeId
                "\"CODE_STRING\" TEXT," + // 2: CodeString
                "\"CODE_NAME\" TEXT," + // 3: CodeName
                "\"CODE_VALUE\" TEXT," + // 4: CodeValue
                "\"CODE_TABLE\" TEXT," + // 5: CodeTable
                "\"CODE_FIELD\" TEXT," + // 6: CodeField
                "\"GROUP_ID\" TEXT," + // 7: GroupId
                "\"CODE_GROUP\" TEXT);"); // 8: CodeGroup
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATE_CODE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StateCodeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CodeId = entity.getCodeId();
        if (CodeId != null) {
            stmt.bindString(2, CodeId);
        }
 
        String CodeString = entity.getCodeString();
        if (CodeString != null) {
            stmt.bindString(3, CodeString);
        }
 
        String CodeName = entity.getCodeName();
        if (CodeName != null) {
            stmt.bindString(4, CodeName);
        }
 
        String CodeValue = entity.getCodeValue();
        if (CodeValue != null) {
            stmt.bindString(5, CodeValue);
        }
 
        String CodeTable = entity.getCodeTable();
        if (CodeTable != null) {
            stmt.bindString(6, CodeTable);
        }
 
        String CodeField = entity.getCodeField();
        if (CodeField != null) {
            stmt.bindString(7, CodeField);
        }
 
        String GroupId = entity.getGroupId();
        if (GroupId != null) {
            stmt.bindString(8, GroupId);
        }
 
        String CodeGroup = entity.getCodeGroup();
        if (CodeGroup != null) {
            stmt.bindString(9, CodeGroup);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StateCodeBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CodeId = entity.getCodeId();
        if (CodeId != null) {
            stmt.bindString(2, CodeId);
        }
 
        String CodeString = entity.getCodeString();
        if (CodeString != null) {
            stmt.bindString(3, CodeString);
        }
 
        String CodeName = entity.getCodeName();
        if (CodeName != null) {
            stmt.bindString(4, CodeName);
        }
 
        String CodeValue = entity.getCodeValue();
        if (CodeValue != null) {
            stmt.bindString(5, CodeValue);
        }
 
        String CodeTable = entity.getCodeTable();
        if (CodeTable != null) {
            stmt.bindString(6, CodeTable);
        }
 
        String CodeField = entity.getCodeField();
        if (CodeField != null) {
            stmt.bindString(7, CodeField);
        }
 
        String GroupId = entity.getGroupId();
        if (GroupId != null) {
            stmt.bindString(8, GroupId);
        }
 
        String CodeGroup = entity.getCodeGroup();
        if (CodeGroup != null) {
            stmt.bindString(9, CodeGroup);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StateCodeBean readEntity(Cursor cursor, int offset) {
        StateCodeBean entity = new StateCodeBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CodeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CodeString
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CodeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CodeValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CodeTable
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CodeField
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // GroupId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // CodeGroup
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StateCodeBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodeId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCodeString(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCodeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCodeValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCodeTable(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCodeField(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroupId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCodeGroup(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StateCodeBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StateCodeBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StateCodeBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
